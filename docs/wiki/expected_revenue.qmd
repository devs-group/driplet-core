---
title: Thoughts on expected revenue of Driplet
author: Driplet Team
format:
  revealjs:
    mermaid:
      theme: neutral
html-math-method: katex
bibliography: expected_revenue.bib
nocite: |
  @*
---

## Personas

What types of users provide data?

- Passive income
- Own a crypto wallet \
  wallet users worldwide ~84 million in 2022 [@walletmarket]
- Supporter of blockchain projects
- _Western-World_

‚û°Ô∏è Estimated: 500k

::: {.notes}
Persona required to define the market size.
:::


## Data

What's the value of the data?

- First-party data can only view the user in the context of one company \
  Even Google figured that out and launched Privacy Sandbox with topics [@privacysandbox] \
  ‚û°Ô∏è **Cross-page** audiences and -interaction!
- Data from websites that do not collect and sell customer data

::: {.notes}
But actually hard to find and scale for more specific markets!
:::


## Product

- Audiences
- Media campaigns based on audiences
- Insights
  - Measured (campaign) results - Cookieless (impressions; reach and frequency)
  - Competitive analysis

::: {.notes}
- Personas may not be representative for competitiv analysis
- Maybe: User identification (Websites can identify users without them being logged in)
:::



## Sales Channels

::: {layout="[60, 40]" style="font-size: 70%;"}

### Audiences
- Direct (requires contract with advertisers, but users might hate that)
- Via commercial data platforms
  - Data Management Platform (DMP)
  - Clean Rooms
  - Data commerce platforms
- Agencies
  - Marketing Agencies Networks (e.g. Tango in Switzerland)
  - Marketing Agencies

### More
- Campaings
  - Demand Side Plattforms (DSP)
  - Agencies
- Measured Insights
  - Direct via "insights portal"

:::


## Customers

Wer hat an den Produkten interesse?

- Advertisers (engage with customers that do not have a brand awareness!)
- eCommerce (competitiv analysis)
- Market researchers
- Companies that train AI Agents


## Challanges

- Proxy email addresses reduces retargeting via DMPs significantly [@hidemyemail]
- Hard findk and scaling of personas for a specific market


## Calculations üöß {.smaller}

Based on previous considerations we can define the following revenue function:

$$ \mathit{\#~of~users} \times \mathit{avg~value~of~user} $$

$$ \mathit{\#users} \times \mathit{\#audiences~per~user} \times \mathit{\#customers} \times \mathit{price~per~audience} $$

$$ 500\,\text{k} \times 3 \times 100 \times \$5 = \$750\,\text{M} $$


::: {.notes}
Ignoring fees of selling data...
:::


## Next steps

![](diagrams/timeline.drawio.svg){width="100%" height="100%" position="absolut"}


## Revenue Projection {.smaller}

```{python}
from IPython.display import display, HTML
import pandas as pd
# import plotly.express as px

df = pd.DataFrame(data={
  'time': ['Q1-25', 'Q2-25', 'Q3-25', 'Q4-25', 'Q1-26', 'Q2-26', 'Q3-26', 'Q4-26'],
  'revenue': [0, 400, 800, 1200, 100000, 1000000, 5000000, 5000000],
  '# of customers': [0, 0, 0, 0, 1, 2, 4, 10],
  '# of users': [0, 1000, 10000, 50000, 100000, 250000, 400000, 500000],
  'value of audience': [10, 10, 10, 10, 10, 10, 10, 10],
  'costs of operations': [1000, 1000, 1500, 2000, 3000, 4000, 5000, 5500],
  'costs of token distribution': [0, 0, 0, 0, 1000, 2000, 3000, 4000]
})
df.index = df['time']
df.index.name = 'time'

display(HTML(df.to_html(index=False)))
```


## Revenue Projection Diagram

```{python}
from plotly import graph_objects as go

fig = go.Figure(
    data=[
        go.Bar(
            name='Revenue',
            x=df['time'],
            y=df['revenue'],
            offsetgroup=0,
            marker_color='#c1c1c1',

        ),
        go.Bar(
            name='Cost of Operations',
            x=df['time'],
            y=df['costs of operations'],
            offsetgroup=1,
            marker_color='#717171'
        ),
        go.Bar(
            name='Cost of Token Distribution',
            x=df['time'],
            y=df['costs of token distribution'],
            offsetgroup=1,
            marker_color='#474747',
            base=df['costs of operations']
        )
    ],
    layout=go.Layout(
        yaxis_title='USD',
        # xaxis_title='Time',
        font_color='#222222',
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        showlegend=True,
        barcornerradius=0,
        bargroupgap=0.05
    )
)

fig.update_yaxes(type='log', gridcolor='#dedede')
fig.update_traces(marker_line_width=0)

fig.show(config={'displayModeBar': False})
```


## Roadmap üöß

```{mermaid}
%%| label: fig-roadmap
%%| fig-cap: "Roadmap2"
%%| file: diagrams/roadmap.mermaid
```


## Revenue strategy üöß

```{python}
#| label: fig-revenue
#| fig-cap: "Revenue"

import math
from datetime import date

import pandas as pd
import plotly.express as px
import numpy as np


index = pd.date_range("2024-01-01", "2025-01-1", freq="D")
x = np.arange(0, (date(2025, 1, 1) - date(2024, 1, 1)).days + 1)
y1 = [math.log(1 + x1) for x1 in x]
y2 = [x1 * 500000 / len(x) * 0.0001 for x1 in x]

df = pd.DataFrame(index=index, data={'col1': y1, 'col2': y2})
fig = px.line(df, labels={'index':'t', 'value':'revenue'}, template='plotly_white')

# fig.update_layout(width=900)
fig.show(config = {'displayModeBar': False})
```



## Operative Costs üöß

- DMPs
- Agencies



## References

::: {#refs}
:::